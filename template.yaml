AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  mymovie

  Sample SAM Template for mymovie

Parameters:
  EnviromentType:
    Type: String
    Default: stg
    AllowedValues:
      - prod
      - stg
  MyMovieCertificateId:
    Type: String
    Default: none
  TMDBApiKey:
    Type: String
    Default: none
  MyMovieApiKey:
    Type: String
    Default: none

Mappings:
  EnviromentMapping:
    prod:
      DomainName: mymovie.jp
    stg:
      DomainName: stg.mymovie.jp
  
Globals:
  Function:
    Timeout: 3
    MemorySize: 128

Resources:
########## Config for APIGateWay AccessLog (S3 IAM Firehose)
###S3
  AppBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: true
            ServerSideEncryptionByDefault: 
              SSEAlgorithm: AES256
      BucketName: !Sub mymovie-${EnviromentType}-${AWS::AccountId}
      LoggingConfiguration: 
        DestinationBucketName: !Sub appaccesslog-${EnviromentType}-${AWS::AccountId}
      PublicAccessBlockConfiguration: 
        BlockPublicAcls: true 
        BlockPublicPolicy: true 
        IgnorePublicAcls: true 
        RestrictPublicBuckets: true 
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced
      Tags:
        - Key: env
          Value: !Sub ${EnviromentType}
      WebsiteConfiguration: 
        IndexDocument: signin.html

  AppAccessLogBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: true
            ServerSideEncryptionByDefault: 
              SSEAlgorithm: AES256
      BucketName: !Sub appaccesslog-${EnviromentType}-${AWS::AccountId}
      PublicAccessBlockConfiguration: 
        BlockPublicAcls: true 
        BlockPublicPolicy: true 
        IgnorePublicAcls: true 
        RestrictPublicBuckets: true
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced
      Tags:
        - Key: env
          Value: !Sub ${EnviromentType}

  CfAccessLogBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: true
            ServerSideEncryptionByDefault: 
              SSEAlgorithm: AES256
      BucketName: !Sub cfaccesslog-${EnviromentType}-${AWS::AccountId}
      PublicAccessBlockConfiguration: 
        BlockPublicAcls: true 
        BlockPublicPolicy: true 
        IgnorePublicAcls: true 
        RestrictPublicBuckets: true 
      OwnershipControls:
        Rules:
          - ObjectOwnership: ObjectWriter
      Tags:
        - Key: env
          Value: !Sub ${EnviromentType}

  ApiGwAccessLogBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - BucketKeyEnabled: true
            ServerSideEncryptionByDefault: 
              SSEAlgorithm: AES256
      BucketName: !Sub apigwaccesslog-${EnviromentType}-${AWS::AccountId}
      PublicAccessBlockConfiguration: 
        BlockPublicAcls: true 
        BlockPublicPolicy: true 
        IgnorePublicAcls: true 
        RestrictPublicBuckets: true 
      OwnershipControls:
        Rules:
          - ObjectOwnership: BucketOwnerEnforced
      Tags:
        - Key: env
          Value: !Sub ${EnviromentType}

###S3 BacketPolicy
  AppBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref AppBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "cloudfront.amazonaws.com"
            Action: "s3:GetObject"
            Resource: !Sub
              - "arn:aws:s3:::${AppBucketName}/*"
              - AppBucketName: !Ref AppBucket
            Condition:
              StringEquals:
                "AWS:SourceArn": !Sub
                  - "arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontId}"
                  - CloudFrontId: !GetAtt MyMovieCloudFront.Id

  AppAccessLogBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref AppAccessLogBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "logging.s3.amazonaws.com"
            Action:
              "s3:PutObject"
            Resource: !Sub
              - "arn:aws:s3:::${AppAccessLogBucketName}/*"
              - AppAccessLogBucketName: !Ref AppAccessLogBucket
            Condition:
              ArnLike:
                "aws:SourceArn": !Sub
                  - "arn:aws:s3:::${AppBucketName}"
                  - AppBucketName: !Ref AppBucket

###IAM Role
  APiGatewayRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument: 
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - apigateway.amazonaws.com
              Action:
                - 'sts:AssumeRole'
        Description: "IamRole for apigateway to access dynamodb"
        ManagedPolicyArns: 
          - "arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs"
          - "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess"
        RoleName: !Sub "DynAccess-${EnviromentType}-apigw-role"
        Tags: 
          - Key: env
            Value: !Sub "${EnviromentType}"
            
  APiGatewayAccessLogRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                firehose.amazonaws.com
            Action:
              'sts:AssumeRole'
      Description: "IamRole for apigateway accesslog fron firehose to s3"
      RoleName: !Sub "S3Access-${EnviromentType}-apigwlog-role"
      Tags: 
        - Key: env
          Value: !Sub "${EnviromentType}"

###IAM Policy
  PutApigwLogPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Action: 
              - "s3:AbortMultipartUpload"
              - "s3:GetBucketLocation"
              - "s3:GetObject"
              - "s3:ListBucket"
              - "s3:ListBucketMultipartUploads"
              - "s3:PutObject"
            Resource:
              - !Sub "arn:aws:s3:::apigwaccesslog-${EnviromentType}-${AWS::AccountId}"
              - !Sub "arn:aws:s3:::apigwaccesslog-${EnviromentType}-${AWS::AccountId}/*"
      PolicyName: !Sub "PutApigeLog-${EnviromentType}-policy"
      Roles: 
        - !Ref APiGatewayAccessLogRole

###Firehose
  ApigwLogDeliveryStream:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties:
      DeliveryStreamName: !Sub amazon-apigateway-${EnviromentType}-fh
      DeliveryStreamType: DirectPut
      ExtendedS3DestinationConfiguration:
        BucketARN: !GetAtt ApiGwAccessLogBucket.Arn
        RoleARN: !GetAtt APiGatewayAccessLogRole.Arn
      Tags:
        - Key: env
          Value: !Sub ${EnviromentType}

###Cognito
  MyMovieUserPool:
    Type: AWS::Cognito::UserPool
    Properties: 
      AliasAttributes: 
        - email
      AutoVerifiedAttributes: 
        - email
      #LambdaConfig: 
      #  PostConfirmation: !GetAtt PosUseFunction.Arn
      Policies: 
        PasswordPolicy: 
          MinimumLength: 6
          RequireLowercase: true
          RequireNumbers: true
          RequireUppercase: true
      Schema: 
        - AttributeDataType: "String"
          Name: "birthdate"
          Required: true
        - AttributeDataType: "String"
          Name: "email"
          Required: true
        - AttributeDataType: "String"
          Mutable: true
          Name: "preferred_username"
          Required: true
        - AttributeDataType: "String"
          Mutable: true
          Name: "website"
          Required: true
      UsernameConfiguration: 
        CaseSensitive: false
      UserPoolName: !Sub mymovie-${EnviromentType}-userpool

  MyMovieUserPoolAppClient:
    Type: AWS::Cognito::UserPoolClient
    Properties: 
      ClientName: MyMovie
      EnableTokenRevocation: false
      PreventUserExistenceErrors: ENABLED
      ExplicitAuthFlows:
        - ALLOW_ADMIN_USER_PASSWORD_AUTH
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      UserPoolId: !Ref MyMovieUserPool

###API Gateway
  MyMovieAPIGateway:
    Type: AWS::Serverless::Api
    Properties:
      AccessLogSetting:
        DestinationArn: !GetAtt ApigwLogDeliveryStream.Arn
        Format: '{ "requestId":"$context.requestId", "ip": "$context.identity.sourceIp", "caller":"$context.identity.caller", "user":"$context.identity.user","requestTime":"$context.requestTime", "httpMethod":"$context.httpMethod","resourcePath":"$context.resourcePath", "status":"$context.status","protocol":"$context.protocol", "responseLength":"$context.responseLength" }\n'
      StageName: mymovie-apigw
      ApiKeySourceType: HEADER
      EndpointConfiguration:
        Type: REGIONAL
      DefinitionBody:
        swagger: "2.0"
        info:
          description: "get userid"
          version: "1.0"
          title: "mymovie"
        basePath: "/mymovie-apigw"
        schemes:
        - "https"
        paths:
          /useremail:
            get:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              security:
              - api_key: []
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CheckSignupFunction.Arn}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\n  \"username\": \"$input.params('username')\",\n \
                    \ \"email\": \"$input.params('email')\"\n}"
                passthroughBehavior: "when_no_templates"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
          /userid:
            get:
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              security:
              - api_key: []
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetUseIdFunction.Arn}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                passthroughBehavior: "when_no_match"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
          /user:
            get:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              parameters:
              - name: "topuser"
                in: "query"
                required: true
                type: "string"
              - name: "list"
                in: "query"
                required: true
                type: "string"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              security:
              - api_key: []
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetUseFunction.Arn}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\n  \"user\": \"$input.params('topuser')\",\n  \"list\": \"$input.params('list')\" \n}"
                passthroughBehavior: "when_no_templates"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
            put:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              parameters:
              - name: "upduser"
                in: "query"
                required: false
                type: "string"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
              security:
              - api_key: []
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdUseFunction.Arn}/invocations"
                responses:
                  default:
                    statusCode: "200"
                requestTemplates:
                  application/json: "{\n  \"user\": \"$input.params('upduser')\"\n}"
                passthroughBehavior: "when_no_templates"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
          /movie:
            get:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              parameters:
              - name: "title"
                in: "query"
                required: true
                type: "string"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              security:
              - api_key: []
              x-amazon-apigateway-integration:
                credentials: !Sub "arn:aws:iam::${AWS::AccountId}:role/DynAccess-${EnviromentType}-apigw-role"
                httpMethod: "POST"
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:dynamodb:action/Query"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: !Sub 
                    - "{\n  \"TableName\": \"${MovieTableName}\",\n  \"IndexName\": \"title-user_id-index\"\
                    ,\n  \"KeyConditions\": { \n    \"title\": {\n      \"ComparisonOperator\"\
                    :\"EQ\",\n      \"AttributeValueList\": [{\"S\": \"$input.params('title')\"\
                    }]\n      }\n  }\n}"
                    - MovieTableName: !Ref MovieTable
                passthroughBehavior: "when_no_templates"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
            delete:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              parameters:
              - name: "user_id"
                in: "query"
                required: false
                type: "string"
              - name: "title"
                in: "query"
                required: false
                type: "string"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
              security:
              - MyMovie: []
              - api_key: []
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DelMovFunction.Arn}/invocations"
                responses:
                  default:
                    statusCode: "200"
                requestTemplates:
                  application/json: "{\n  \"user_id\": \"$input.params('user_id')\",\n  \"\
                    title\": \"$input.params('title')\"\n}"
                passthroughBehavior: "when_no_templates"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
            post:
              consumes:
              - "application/x-www-form-urlencoded"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
              security:
              - api_key: []
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PosMovFunction.Arn}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseTemplates:
                      application/json: !Sub
                        - "#set($context.responseOverride.status = 302)\n#set($context.responseOverride.header.location\
                        \ = \"https://${MyMovieDomain}/index.html?list=register\"\
                        )"
                        - MyMovieDomain: !FindInMap [EnviromentMapping, !Ref EnviromentType, DomainName]
                requestTemplates:
                  application/x-www-form-urlencoded: "## convert HTTP POST data to JSON for\
                    \ insertion directly into a Lambda function\n\n## first we we set up our\
                    \ variable that holds the tokenised key value pairs\n#set($httpPost =\
                    \ $input.path('$').split(\"&\"))\n\n## next we set up our loop inside\
                    \ the output structure\n{\n#foreach( $kvPair in $httpPost )\n ## now we\
                    \ tokenise each key value pair using \"=\"\n #set($kvTokenised = $kvPair.split(\"\
                    =\"))\n ## finally we output the JSON for this pair and add a \",\" if\
                    \ this isn't the last pair\n \"$kvTokenised[0]\" : \"$kvTokenised[1]\"\
                    #if( $foreach.hasNext ),#end\n#end\n}"
                passthroughBehavior: "when_no_templates"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
          /score:
            post:
              consumes:
              - "application/x-www-form-urlencoded"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
              security:
              - api_key: []
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdMovFunction.Arn}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseTemplates:
                      application/json: !Sub
                        - "#set($context.responseOverride.status = 302)\n#set($context.responseOverride.header.location\
                        \ = \"https://${MyMovieDomain}/edit.html\")"
                        - MyMovieDomain: !FindInMap [EnviromentMapping, !Ref EnviromentType, DomainName]
                requestTemplates:
                  application/x-www-form-urlencoded: "## convert HTTP POST data to JSON for\
                    \ insertion directly into a Lambda function\n\n## first we we set up our\
                    \ variable that holds the tokenised key value pairs\n#set($httpPost =\
                    \ $input.path('$').split(\"&\"))\n\n## next we set up our loop inside\
                    \ the output structure\n{\n#foreach( $kvPair in $httpPost )\n ## now we\
                    \ tokenise each key value pair using \"=\"\n #set($kvTokenised = $kvPair.split(\"\
                    =\"))\n ## finally we output the JSON for this pair and add a \",\" if\
                    \ this isn't the last pair\n \"$kvTokenised[0]\" : \"$kvTokenised[1]\"\
                    #if( $foreach.hasNext ),#end\n#end\n}"
                passthroughBehavior: "when_no_templates"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'OPTIONS,POST'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
          /follow:
            get:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              parameters:
              - name: "user_id"
                in: "query"
                required: false
                type: "string"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              security:
              - api_key: []
              x-amazon-apigateway-integration:
                credentials: !Sub "arn:aws:iam::${AWS::AccountId}:role/DynAccess-${EnviromentType}-apigw-role"
                httpMethod: "POST"
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:dynamodb:action/Query"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: !Sub
                    - "{\n  \"TableName\": \"${FollowTableName}\",\n  \"KeyConditions\"\
                    : { \n    \"user_id\": {\n      \"ComparisonOperator\":\"EQ\",\n     \
                    \ \"AttributeValueList\": [{\"S\": \"$input.params('user_id')\"}]\n  \
                    \    }\n  }\n}"
                    - FollowTableName: !Ref FollowTable
                passthroughBehavior: "when_no_templates"
                type: "aws"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'GET,OPTIONS'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
            post:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              parameters:
              - name: "user_id"
                in: "query"
                required: false
                type: "string"
              - name: "follow"
                in: "query"
                required: false
                type: "string"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
              security:
              - MyMovies: []
              - api_key: []
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${PosFolFunction.Arn}/invocations"
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\n  \"user_id\": \"$input.params('user_id')\",\n  \"\
                    follow\": \"$input.params('follow')\"\n}"
                passthroughBehavior: "when_no_templates"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
            delete:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              parameters:
              - name: "user_id"
                in: "query"
                required: false
                type: "string"
              - name: "follow"
                in: "query"
                required: false
                type: "string"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
              security:
              - MyMovies: []
              - api_key: []
              x-amazon-apigateway-integration:
                httpMethod: "POST"
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${DelFolFunction.Arn}/invocations"
                responses:
                  default:
                    statusCode: "200"
                requestTemplates:
                  application/json: "{\n  \"user_id\": \"$input.params('user_id')\",\n  \"\
                    follow\": \"$input.params('follow')\"\n}"
                passthroughBehavior: "when_no_templates"
                contentHandling: "CONVERT_TO_TEXT"
                type: "aws"
          /search:
            get:
              produces:
              - "application/json"
              parameters:
              - name: "query"
                in: "query"
                required: false
                type: "string"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
              security:
              - api_key: []
              x-amazon-apigateway-integration:
                httpMethod: "GET"
                uri: !Sub "https://api.themoviedb.org/3/search/movie?api_key=${TMDBApiKey}&language=ja-JA&page=1&include_adult=false"
                responses:
                  default:
                    statusCode: "200"
                requestParameters:
                  integration.request.querystring.query: "method.request.querystring.query"
                passthroughBehavior: "when_no_match"
                type: "http_proxy"
            options:
              consumes:
              - "application/json"
              produces:
              - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
                  headers:
                    Access-Control-Allow-Origin:
                      type: "string"
                    Access-Control-Allow-Methods:
                      type: "string"
                    Access-Control-Allow-Headers:
                      type: "string"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: "200"
                    responseParameters:
                      method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
                      method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
                      method.response.header.Access-Control-Allow-Origin: "'*'"
                requestTemplates:
                  application/json: "{\"statusCode\": 200}"
                passthroughBehavior: "when_no_match"
                type: "mock"
        securityDefinitions:
          api_key:
            type: "apiKey"
            name: "x-api-key"
            in: "header"
          MyMovie:
            type: "apiKey"
            name: "Authorization"
            in: "header"
            x-amazon-apigateway-authtype: "cognito_user_pools"
            x-amazon-apigateway-authorizer:
              providerARNs:
              - !GetAtt MyMovieUserPool.Arn
              type: "cognito_user_pools"
        definitions:
          Empty:
            type: "object"
            title: "Empty Schema"

###ApiKey
  MyMovieApikey:
    Type: AWS::ApiGateway::ApiKey
    Properties: 
      Enabled: true
      Name: !Sub MyMovie-${EnviromentType}-apikey
      StageKeys: 
        - RestApiId: !Ref MyMovieAPIGateway
          StageName: mymovie-apigw
      Tags: 
        - Key: "Env"
          Value: !Sub ${EnviromentType}
        - Key: "stage"
          Value: !Ref MyMovieAPIGateway.Stage
      Value: !Sub ${MyMovieApiKey}
    
###UsagePlan
  MyMovieUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties: 
      ApiStages:
        - ApiId: !Ref MyMovieAPIGateway
          Stage: mymovie-apigw
      Description: "APIkey for MyMovie ApiGateway"
      Tags: 
        - Key: "Env"
          Value: !Sub ${EnviromentType}
        - Key: "stage"
          Value: !Ref MyMovieAPIGateway.Stage
      UsagePlanName: !Sub MyMovie-${EnviromentType}-usageplan

  MyMovieUsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties: 
      KeyId: !Ref MyMovieApikey
      KeyType: API_KEY
      UsagePlanId: !Ref MyMovieUsagePlan

###dynamodb
  MovieTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - 
          AttributeName: "user_id"
          AttributeType: "S"
        - 
          AttributeName: "title"
          AttributeType: "S"
        - 
          AttributeName: "releace"
          AttributeType: "N"
        - 
          AttributeName: "score"
          AttributeType: "N"
        - 
          AttributeName: "date"
          AttributeType: "N"
      KeySchema:
        -
          AttributeName: "user_id"
          KeyType: "HASH"
        -
          AttributeName: "title"
          KeyType: "RANGE"
      GlobalSecondaryIndexes:
        -
          IndexName: "title-user_id-index"
          KeySchema:
            -
              AttributeName: "title"
              KeyType: "HASH"
            -
              AttributeName: "user_id"
              KeyType: "RANGE"
          Projection:
            ProjectionType: "ALL"
          ProvisionedThroughput:
            ReadCapacityUnits: 1
            WriteCapacityUnits: 1
      LocalSecondaryIndexes:
        - 
          IndexName: "date-index"
          KeySchema:
            - 
              AttributeName: "user_id"
              KeyType: "HASH"
            - 
              AttributeName: "date"
              KeyType: "RANGE"
          Projection:
            ProjectionType: "ALL"
        -
          IndexName: "releace-index"
          KeySchema:
            - 
              AttributeName: "user_id"
              KeyType: "HASH"
            - 
              AttributeName: "releace"
              KeyType: "RANGE"
          Projection:
            ProjectionType: "ALL"
        -
          IndexName: "score-index"
          KeySchema:
            - 
              AttributeName: "user_id"
              KeyType: "HASH"
            - 
              AttributeName: "score"
              KeyType: "RANGE"
          Projection:
            ProjectionType: "ALL"
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      SSESpecification:
        SSEEnabled: false
      TableName: !Sub movie-${EnviromentType}-tb
      Tags:
        - Key: env
          Value: !Sub ${EnviromentType}


  FollowTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - 
          AttributeName: "user_id"
          AttributeType: "S"
        - 
          AttributeName: "follow"
          AttributeType: "S"
      KeySchema:
        -
          AttributeName: "user_id"
          KeyType: "HASH"
        -
          AttributeName: "follow"
          KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      SSESpecification:
        SSEEnabled: false
      TableName: !Sub follow-${EnviromentType}-tb
      Tags:
        - Key: env
          Value: !Sub ${EnviromentType}

  UserTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - 
          AttributeName: "user_id"
          AttributeType: "S"
      KeySchema:
        -
          AttributeName: "user_id"
          KeyType: "HASH"
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      SSESpecification:
        SSEEnabled: false
      TableName: !Sub user-${EnviromentType}-tb
      Tags:
        - Key: env
          Value: !Sub ${EnviromentType}

###CloudFront
  MyMovieOrignAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties: 
      OriginAccessControlConfig: 
        Name: !Sub "mymovie-${EnviromentType}-${AWS::AccountId}.s3.samazonaws.com"
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4
  
  MyMovieCloudFront:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - !FindInMap [EnviromentMapping, !Ref EnviromentType, DomainName]
        ViewerCertificate: 
          AcmCertificateArn: !Sub "arn:aws:acm:us-east-1:${AWS::AccountId}:certificate/${MyMovieCertificateId}"
          MinimumProtocolVersion: TLSv1.2_2021
          SslSupportMethod: sni-only
        CacheBehaviors: 
          - AllowedMethods: 
              - GET
              - HEAD
              - OPTIONS
            DefaultTTL: 86400
            ForwardedValues:
              Headers: 
                - Authorization
                - X-REVISION-STRING
              QueryString: true
            LambdaFunctionAssociations: 
              - EventType: viewer-request
                LambdaFunctionARN: !Sub "arn:aws:lambda:us-east-1:${AWS::AccountId}:function:GetRevMovie-${EnviromentType}-func:1"
            MaxTTL: 31536000
            MinTTL: 0
            PathPattern: /mymovie-apigw/user
            TargetOriginId: MyMovieApi
            ViewerProtocolPolicy: redirect-to-https
          - AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
              - PUT
              - POST
              - PATCH
              - DELETE
            DefaultTTL: 86400
            ForwardedValues: 
              Headers: 
                - Authorization
                - X-REVISION-STRING
              QueryString: true
            LambdaFunctionAssociations: 
              - EventType: viewer-request
                LambdaFunctionARN: !Sub "arn:aws:lambda:us-east-1:${AWS::AccountId}:function:GetRevFollow-${EnviromentType}-func:1"
            MaxTTL: 31536000
            MinTTL: 0
            PathPattern: /mymovie-apigw/follow
            TargetOriginId: MyMovieApi
            ViewerProtocolPolicy: redirect-to-https
          - AllowedMethods: 
              - GET
              - HEAD
              - OPTIONS
              - PUT
              - POST
              - PATCH
              - DELETE
            DefaultTTL: 86400
            ForwardedValues: 
              Headers: 
                - Authorization
              QueryString: true
            MaxTTL: 31536000
            MinTTL: 0
            PathPattern: /mymovie-apigw/*
            TargetOriginId: MyMovieApi
            ViewerProtocolPolicy: redirect-to-https
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
            - PUT
            - POST
            - PATCH
            - DELETE
          DefaultTTL: 86400
          ForwardedValues: 
              QueryString: false
          MaxTTL: 31536000
          MinTTL: 0
          TargetOriginId: MyMovieBacket
          ViewerProtocolPolicy: redirect-to-https
        DefaultRootObject: signin.html
        Enabled: true
        HttpVersion: http2
        Logging:
          Bucket: !Sub "cfaccesslog-${EnviromentType}-${AWS::AccountId}.s3.amazonaws.com"
        Origins:
          - CustomOriginConfig:
              HTTPPort: 80
              HTTPSPort: 443
              OriginProtocolPolicy: match-viewer
              OriginSSLProtocols: 
                - TLSv1.2
            DomainName: !Sub
              - "${ApigwId}.execute-api.ap-northeast-1.amazonaws.com"
              - ApigwId: !Ref MyMovieAPIGateway
            Id: MyMovieApi
            OriginCustomHeaders:
              - HeaderName: x-api-key
                HeaderValue: !Sub ${MyMovieApiKey}
          - DomainName: !Sub "mymovie-${EnviromentType}-${AWS::AccountId}.s3.amazonaws.com"
            Id: MyMovieBacket
            S3OriginConfig:
              OriginAccessIdentity: ""
            OriginAccessControlId: !Ref MyMovieOrignAccessControl
      Tags:
        - Key: "Env"
          Value: !Sub ${EnviromentType}


###Lambda
  CheckSignupFunction:
    Type: AWS::Serverless::Function 
    Properties:
      FunctionName: !Sub CheckSignup-${EnviromentType}-func
      Description: "check username and email when signup"
      CodeUri: lambda_code/
      Policies:
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
        - arn:aws:iam::aws:policy/AmazonCognitoReadOnly
      Handler: CheckSignup.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Events:
        MyMovie:
          Type: Api
          Properties:
            Auth:
              ApiKeyRequired: true
            Path: /useremail
            Method: get
            RestApiId:
              Ref: MyMovieAPIGateway

  GetUseIdFunction:
    Type: AWS::Serverless::Function 
    Properties:
      FunctionName: !Sub GetUseId-${EnviromentType}-func
      Description: "get a specific user"
      Environment:
        Variables: 
          MovieTable: !Ref MovieTable
          UserTable: !Ref UserTable
          FollowTable: !Ref FollowTable
      CodeUri: lambda_code/
      Policies:
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
      Handler: GetUseId.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Events:
        MyMovie:
          Type: Api
          Properties:
            Auth:
              ApiKeyRequired: true
            Path: /userid
            Method: get
            RestApiId:
              Ref: MyMovieAPIGateway

  GetUseFunction:
    Type: AWS::Serverless::Function 
    Properties:
      FunctionName: !Sub GetUse-${EnviromentType}-func
      Description: "get specific users all movie"
      Environment:
        Variables: 
          MovieTable: !Ref MovieTable
          UserTable: !Ref UserTable
          FollowTable: !Ref FollowTable
      CodeUri: lambda_code/
      Policies:
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
      Handler: GetUse.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Events:
        MyMovie:
          Type: Api
          Properties:
            Auth:
              ApiKeyRequired: true
            Path: /user
            Method: get
            RestApiId:
              Ref: MyMovieAPIGateway

  PosUseFunction:
    Type: AWS::Serverless::Function 
    Properties:
      FunctionName: !Sub PosUse-${EnviromentType}-func
      Description: "resigter user when signup"
      Environment:
        Variables: 
          MovieTable: !Ref MovieTable
          UserTable: !Ref UserTable
          FollowTable: !Ref FollowTable
      CodeUri: lambda_code/
      Policies:
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
      Handler: PosUse.lambda_handler
      Runtime: python3.9
      Architectures:
      - x86_64
      Events:
        CognitoUserPoolPreSignup:
          Type: Cognito
          Properties:
            UserPool:
              Ref: MyMovieUserPool
            Trigger: PostConfirmation

  UpdUseFunction:
    Type: AWS::Serverless::Function 
    Properties:
      FunctionName: !Sub UpdUse-${EnviromentType}-func
      Description: "update username"
      Environment:
        Variables: 
          MovieTable: !Ref MovieTable
          UserTable: !Ref UserTable
          FollowTable: !Ref FollowTable
      CodeUri: lambda_code/
      Policies:
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
      Handler: UpdUse.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Events:
        MyMovie:
          Type: Api
          Properties:
            Auth:
              ApiKeyRequired: true
            Path: /user
            Method: put
            RestApiId:
              Ref: MyMovieAPIGateway

  PosMovFunction:
    Type: AWS::Serverless::Function 
    Properties:
      FunctionName: !Sub PosMov-${EnviromentType}-func
      Description: "register movie"
      Environment:
        Variables: 
          MovieTable: !Ref MovieTable
          UserTable: !Ref UserTable
          FollowTable: !Ref FollowTable
      CodeUri: lambda_code/
      Policies:
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
      Handler: PosMov.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Events:
        MyMovie:
          Type: Api
          Properties:
            Auth:
              ApiKeyRequired: true
            Path: /movie
            Method: post
            RestApiId:
              Ref: MyMovieAPIGateway

  DelMovFunction:
    Type: AWS::Serverless::Function 
    Properties:
      FunctionName: !Sub DelMov-${EnviromentType}-func
      Description: "delete movie"
      Environment:
        Variables: 
          MovieTable: !Ref MovieTable
          UserTable: !Ref UserTable
          FollowTable: !Ref FollowTable
      CodeUri: lambda_code/
      Policies:
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
      Handler: DelMov.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Events:
        MyMovie:
          Type: Api
          Properties:
            Auth:
              ApiKeyRequired: true
            Path: /movie
            Method: delete
            RestApiId:
              Ref: MyMovieAPIGateway

  UpdMovFunction:
    Type: AWS::Serverless::Function 
    Properties:
      FunctionName: !Sub UpdMov-${EnviromentType}-func
      Description: "update movie score"
      Environment:
        Variables: 
          MovieTable: !Ref MovieTable
          UserTable: !Ref UserTable
          FollowTable: !Ref FollowTable
      CodeUri: lambda_code/
      Policies:
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
      Handler: UpdMov.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Events:
        MyMovie:
          Type: Api
          Properties:
            Auth:
              ApiKeyRequired: true
            Path: /score
            Method: post
            RestApiId:
              Ref: MyMovieAPIGateway

  PosFolFunction:
    Type: AWS::Serverless::Function 
    Properties:
      FunctionName: !Sub PosFol-${EnviromentType}-func
      Description: "follow"
      Environment:
        Variables: 
          MovieTable: !Ref MovieTable
          UserTable: !Ref UserTable
          FollowTable: !Ref FollowTable
      CodeUri: lambda_code/
      Policies:
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
      Handler: PosFol.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Events:
        MyMovie:
          Type: Api
          Properties:
            Auth:
              ApiKeyRequired: true
            Path: /follow
            Method: post
            RestApiId:
              Ref: MyMovieAPIGateway

  DelFolFunction:
    Type: AWS::Serverless::Function 
    Properties:
      FunctionName: !Sub DelFol-${EnviromentType}-func
      Description: "release follow"
      Environment:
        Variables: 
          MovieTable: !Ref MovieTable
          UserTable: !Ref UserTable
          FollowTable: !Ref FollowTable
      CodeUri: lambda_code/
      Policies:
        - arn:aws:iam::aws:policy/AmazonCognitoReadOnly
        - arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess
      Handler: DelFol.lambda_handler
      Runtime: python3.9
      Architectures:
        - x86_64
      Events:
        MyMovie:
          Type: Api
          Properties:
            Auth:
              ApiKeyRequired: true
            Path: /follow
            Method: delete
            RestApiId:
              Ref: MyMovieAPIGateway